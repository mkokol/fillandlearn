<style>
    .learn-translation {
        position: relative;
        width: 100%;
        left: 0;
        z-index: 1000;
        min-width: 160px;
        padding: 0;
        list-style: none;
        background-color: #fff;
        -webkit-background-clip: padding-box;
        background-clip: padding-box;
        border: 1px solid rgba(0, 0, 0, .15);
        border-radius: 4px;
        -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, .175);
        box-shadow: 0 3px 6px rgba(0, 0, 0, .175);
    }

    .learn-translation:before {
        content: "";
        border-bottom: 10px solid #fff;
        border-right: 10px solid transparent;
        border-left: 10px solid transparent;
        position: absolute;
        top: -10px;
        left: 16px;
        z-index: 10;
    }

    .learn-translation:after {
        content: "";
        border-bottom: 12px solid #ccc;
        border-right: 12px solid transparent;
        border-left: 12px solid transparent;
        position: absolute;
        top: -12px;
        left: 14px;
        z-index: 9;
    }

    .learn-translation li {
        border-bottom: 1px solid rgba(0, 0, 0, .15);
        padding: 5px 10px;
    }

    .learn-translation li:last-child {
        border-bottom: none;
    }

    .timer-msg {
        line-height: 14px;
        font-size: 16px;
        color: #333333;
    }

    .timer-msg span {
        display: block;
    }

    .timer-msg span:first-child {
        border-bottom: 1px solid #333333;
        padding-bottom: 3px;
    }

    .timer-msg span:last-child {
        padding-top: 5px;
    }

    #run-remembering-again {
        display: none;
    }
</style>

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <h4 class="modal-title" id="myModalLabel">Remember words.</h4>
        </div>
        <div class="modal-body">
            <div class="row">
                <div class="col-md-9 col-xs-9">
                    {% for sheetWord in sheetWords|slice(0, 1) %}
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h3 id="word" class="panel-title">
                                    {{ sheetWord.word.word }}
                                </h3>
                            </div>
                        </div>
                        <ul id="translations" class="learn-translation">
                            {% for sheetWordTranslation in sheetWord.sheetWordTranslations %}
                                <li>
                                    {{ sheetWordTranslation.translation.translation }}
                                </li>
                            {% endfor %}
                        </ul>
                    {% endfor %}
                </div>
                <div class="col-md-3 col-xs-3">
                    <div class="timer" data-width="100" data-height="100"
                         data-fgColor="#04b100" data-thickness=".2">
                        <span class="timer-msg">
                            <span id="current-word-number">1</span>
                            <span>{{ sheetWords|length }}</span>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="run-remembering-again" type="button" class="btn btn-primary">Run Again</button>
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
    </div>
</div>

<script>
    var timerId = null;
    var time = 0;
    var word = 0;
    var words = [];

    {% for sheetWord in sheetWords %}
    words.push({
        word: '{{ sheetWord.word.word }}',
        translations: [{% spaceless %}
            {% for sheetWordTranslation in sheetWord.sheetWordTranslations %}
            '{{ sheetWordTranslation.translation.translation }}',
            {% endfor %}
            {% endspaceless %}]
    });
    {% endfor %}

    $(".timer").knob({
        width: 100,
        height: 100,
        min: 0,
        max: 360
    });
    $.when(
            $('.timer').animate(
                    {value: 100}
                    , {
                        duration: 1000,
                        easing: 'swing',
                        progress: function () {
                            $(this).val(Math.round(this.value / 100 * $(this).data('targetValue'))).trigger('change')
                        }
                    }
            )
    ).then(
            function () {
                timerId = setTimeout(timerClick, 500);
            }
    );

    $("#run-remembering-again").click(function(){
        $("#run-remembering-again").hide();
        words = shuffle(words);
        word = 0;
        showWord(0);
        timerId = setTimeout(timerClick, 100);
    });

    function timerClick() {
        $('.timer').val(time).trigger("change");
        timerId = setTimeout(timerClick, 100);

        time += 360 / 90;
        if (time > 360) {
            time = 0;
            word += 1;
            showWord(word);
        }
    }

    function showWord(index) {
        if (index < words.length) {
            $("#word").text(words[index].word);
            var translations = '';
            for (var i = 0; i < words[index].translations.length; i++) {
                translations += '<li>' + words[index].translations[i] + '</li>';
            }
            $("#current-word-number").html(index + 1);
            $("#translations").html(translations);
        }else {
            clearTimeout(timerId);
            $("#run-remembering-again").show();
        }
    }

    function modalRemove() {
        clearTimeout(timerId);
    }

    function shuffle(array) {
        var counter = array.length, temp, index;

        // While there are elements in the array
        while (counter > 0) {
            // Pick a random index
            index = Math.floor(Math.random() * counter);

            // Decrease counter by 1
            counter--;

            // And swap the last element with it
            temp = array[counter];
            array[counter] = array[index];
            array[index] = temp;
        }

        return array;
    }
</script>